{"version":3,"sources":["components/common/CustomSelectInput.js","containers/pages/Pagination.js","containers/pages/ListPageHeading.js","containers/pages/AddNewModal.js","hooks/use-mousetrap.js","containers/pages/ContextMenuContainer.js","containers/pages/DataListView.js","containers/pages/ImageListView.js","containers/pages/ThumbListView.js","containers/pages/ListPageListing.js","views/app/pages/product/data-list.js","containers/navs/Breadcrumb.js"],"names":["CustomSelectInput","props","customProps","autoCorrect","autoCapitalize","Input","Pagination","totalPage","currentPage","numberLimit","lastIsActive","firstIsActive","onChangePage","startPoint","endPoint","parseInt","points","i","push","firstPageButtonClassName","lastPageButtonClassName","prevPageButtonClassName","nextPageButtonClassName","xxs","className","onClick","map","key","injectIntl","intl","displayMode","changeDisplayMode","handleChangeSelectAll","changeOrderBy","changePageSize","selectedPageSize","totalItemCount","selectedOrderOption","match","startIndex","endIndex","selectedItemsLength","itemsLength","onSearchKey","orderOptions","pageSizes","toggleModal","heading","useState","dropdownSplitOpen","setDropdownSplitOpen","displayOptionsIsOpen","setDisplayOptionsIsOpen","messages","id","color","size","isOpen","toggle","type","checked","onChange","label","caret","right","href","order","index","column","name","placeholder","onKeyPress","e","AddNewModal","modalOpen","categories","wrapClassName","backdrop","components","classNamePrefix","options","outline","handlerKey","handlerCallback","actionRef","useRef","current","useEffect","mousetrap","bind","evt","combo","preventDefault","unbind","ContextMenuContainer","onContextMenu","onContextMenuClick","onShow","detail","data","action","React","memo","product","isSelect","collect","onCheckItem","Card","event","classnames","active","to","title","category","date","Badge","statusColor","pill","status","CustomInput","sm","lg","xl","CardImg","top","alt","src","img","CardBody","Row","CardSubtitle","CardText","items","selectedItems","includes","getIndex","value","arr","prop","length","apiUrl","servicePath","DataListPages","isLoaded","setIsLoaded","setDisplayMode","setCurrentPage","setSelectedPageSize","setSelectedOrderOption","setModalOpen","setTotalItemCount","setTotalPage","search","setSearch","setSelectedItems","setItems","lastChecked","setLastChecked","a","axios","get","then","res","totalItem","fetchData","isToggle","x","document","activeElement","blur","useMousetrap","find","target","toLowerCase","tagName","parentElement","selectedList","filter","shiftKey","newItems","start","end","slice","Math","min","max","item","Array","from","Set","console","log","clickedProductId","getMenuTitle","sub","getUrl","path","split","BreadcrumbItems","substr","paths","indexOf","BreadcrumbContainer"],"mappings":"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","file":"static/js/product-data-list.a6690d47.chunk.js","sourcesContent":["import React from 'react';\r\nimport { components } from 'react-select';\r\n\r\nconst CustomSelectInput = (props) => {\r\n  const customProps = { ...props };\r\n  delete customProps.autoCorrect;\r\n  delete customProps.autoCapitalize;\r\n  return <components.Input {...customProps} />;\r\n};\r\n\r\nexport default CustomSelectInput;\r\n","import React from 'react';\r\nimport { Nav, NavItem, NavLink } from 'reactstrap';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\n\r\nconst Pagination = ({\r\n  totalPage = 0,\r\n  currentPage = 1,\r\n  numberLimit = 5,\r\n  lastIsActive = true,\r\n  firstIsActive = true,\r\n  onChangePage,\r\n}) => {\r\n  let startPoint = 1;\r\n  let endPoint = numberLimit;\r\n\r\n  if (numberLimit > totalPage) {\r\n    startPoint = 1;\r\n    endPoint = totalPage;\r\n  } else if (currentPage <= parseInt(numberLimit / 2, 10)) {\r\n    startPoint = 1;\r\n    endPoint = numberLimit;\r\n  } else if (currentPage + parseInt(numberLimit / 2, 10) <= totalPage) {\r\n    startPoint = currentPage - parseInt(numberLimit / 2, 10);\r\n    endPoint = currentPage + parseInt(numberLimit / 2, 10);\r\n  } else {\r\n    startPoint = totalPage - (numberLimit - 1);\r\n    endPoint = totalPage;\r\n  }\r\n  startPoint = startPoint === 0 ? 1 : startPoint;\r\n  const points = [];\r\n  for (let i = startPoint; i <= endPoint; i += 1) {\r\n    points.push(i);\r\n  }\r\n\r\n  const firstPageButtonClassName = currentPage <= 1 ? 'disabled' : '';\r\n  const lastPageButtonClassName = currentPage >= totalPage ? 'disabled' : '';\r\n  const prevPageButtonClassName = currentPage <= 1 ? 'disabled' : '';\r\n  const nextPageButtonClassName = currentPage >= totalPage ? 'disabled' : '';\r\n  return totalPage > 1 ? (\r\n    <Colxx xxs=\"12\" className=\"mt-3 mb-3\">\r\n      <Nav className=\"pagination justify-content-center\">\r\n        {firstIsActive && (\r\n          <NavItem className={`page-item ${firstPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link first c-pointer\"\r\n              onClick={() => onChangePage(1)}\r\n            >\r\n              <i className=\"simple-icon-control-start\" />\r\n            </NavLink>\r\n          </NavItem>\r\n        )}\r\n\r\n        <NavItem className={`page-item ${prevPageButtonClassName}`}>\r\n          <NavLink\r\n            className=\"page-link prev c-pointer\"\r\n            onClick={() => onChangePage(currentPage - 1)}\r\n          >\r\n            <i className=\"simple-icon-arrow-left\" />\r\n          </NavLink>\r\n        </NavItem>\r\n        {points.map((i) => {\r\n          return (\r\n            <NavItem\r\n              key={i}\r\n              className={`page-item ${currentPage === i && 'active'}`}\r\n            >\r\n              <NavLink\r\n                className=\"page-link c-pointer\"\r\n                onClick={() => onChangePage(i)}\r\n              >\r\n                {i}\r\n              </NavLink>\r\n            </NavItem>\r\n          );\r\n        })}\r\n        <NavItem className={`page-item ${nextPageButtonClassName}`}>\r\n          <NavLink\r\n            className=\"page-link next c-pointer\"\r\n            onClick={() => onChangePage(currentPage + 1)}\r\n          >\r\n            <i className=\"simple-icon-arrow-right\" />\r\n          </NavLink>\r\n        </NavItem>\r\n        {lastIsActive && (\r\n          <NavItem className={`page-item ${lastPageButtonClassName}`}>\r\n            <NavLink\r\n              className=\"page-link last c-pointer\"\r\n              onClick={() => onChangePage(totalPage)}\r\n            >\r\n              <i className=\"simple-icon-control-end\" />\r\n            </NavLink>\r\n          </NavItem>\r\n        )}\r\n      </Nav>\r\n    </Colxx>\r\n  ) : (\r\n    <Colxx xxs=\"12\" className=\"mt-2\" />\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Row,\r\n  Button,\r\n  ButtonDropdown,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  CustomInput,\r\n  Collapse,\r\n} from 'reactstrap';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nimport { Colxx, Separator } from '../../components/common/CustomBootstrap';\r\nimport Breadcrumb from '../navs/Breadcrumb';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nimport {\r\n  DataListIcon,\r\n  ThumbListIcon,\r\n  ImageListIcon,\r\n} from '../../components/svg';\r\n\r\nconst ListPageHeading = ({\r\n  intl,\r\n  displayMode,\r\n  changeDisplayMode,\r\n  handleChangeSelectAll,\r\n  changeOrderBy,\r\n  changePageSize,\r\n  selectedPageSize,\r\n  totalItemCount,\r\n  selectedOrderOption,\r\n  match,\r\n  startIndex,\r\n  endIndex,\r\n  selectedItemsLength,\r\n  itemsLength,\r\n  onSearchKey,\r\n  orderOptions,\r\n  pageSizes,\r\n  toggleModal,\r\n  heading,\r\n}) => {\r\n  const [dropdownSplitOpen, setDropdownSplitOpen] = useState(false);\r\n  const [displayOptionsIsOpen, setDisplayOptionsIsOpen] = useState(false);\r\n  const { messages } = intl;\r\n\r\n  return (\r\n    <Row>\r\n      <Colxx xxs=\"12\">\r\n        <div className=\"mb-2\">\r\n          <h1>\r\n            <IntlMessages id={heading} />\r\n          </h1>\r\n\r\n          <div className=\"text-zero top-right-button-container\">\r\n            <Button\r\n              color=\"primary\"\r\n              size=\"lg\"\r\n              className=\"top-right-button\"\r\n              onClick={() => toggleModal()}\r\n            >\r\n              <IntlMessages id=\"pages.add-new\" />\r\n            </Button>\r\n            {'  '}\r\n            <ButtonDropdown\r\n              isOpen={dropdownSplitOpen}\r\n              toggle={() => setDropdownSplitOpen(!dropdownSplitOpen)}\r\n            >\r\n              <div className=\"btn btn-primary btn-lg pl-4 pr-0 check-button check-all\">\r\n                <CustomInput\r\n                  className=\"custom-checkbox mb-0 d-inline-block\"\r\n                  type=\"checkbox\"\r\n                  id=\"checkAll\"\r\n                  checked={selectedItemsLength >= itemsLength}\r\n                  onChange={() => handleChangeSelectAll(true)}\r\n                  label={\r\n                    <span\r\n                      className={`custom-control-label ${\r\n                        selectedItemsLength > 0 &&\r\n                        selectedItemsLength < itemsLength\r\n                          ? 'indeterminate'\r\n                          : ''\r\n                      }`}\r\n                    />\r\n                  }\r\n                />\r\n              </div>\r\n              <DropdownToggle\r\n                caret\r\n                color=\"primary\"\r\n                className=\"dropdown-toggle-split btn-lg\"\r\n              />\r\n              <DropdownMenu right>\r\n                <DropdownItem>\r\n                  <IntlMessages id=\"pages.delete\" />\r\n                </DropdownItem>\r\n                <DropdownItem>\r\n                  <IntlMessages id=\"pages.another-action\" />\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </ButtonDropdown>\r\n          </div>\r\n          <Breadcrumb match={match} />\r\n        </div>\r\n\r\n        <div className=\"mb-2\">\r\n          <Button\r\n            color=\"empty\"\r\n            className=\"pt-0 pl-0 d-inline-block d-md-none\"\r\n            onClick={() => setDisplayOptionsIsOpen(!displayOptionsIsOpen)}\r\n          >\r\n            <IntlMessages id=\"pages.display-options\" />{' '}\r\n            <i className=\"simple-icon-arrow-down align-middle\" />\r\n          </Button>\r\n          <Collapse\r\n            isOpen={displayOptionsIsOpen}\r\n            className=\"d-md-block\"\r\n            id=\"displayOptions\"\r\n          >\r\n            <span className=\"mr-3 d-inline-block float-md-left\">\r\n              <a\r\n                href=\"#/\"\r\n                className={`mr-2 view-icon ${\r\n                  displayMode === 'list' ? 'active' : ''\r\n                }`}\r\n                onClick={() => changeDisplayMode('list')}\r\n              >\r\n                <DataListIcon />\r\n              </a>\r\n              <a\r\n                href=\"#/\"\r\n                className={`mr-2 view-icon ${\r\n                  displayMode === 'thumblist' ? 'active' : ''\r\n                }`}\r\n                onClick={() => changeDisplayMode('thumblist')}\r\n              >\r\n                <ThumbListIcon />\r\n              </a>\r\n              <a\r\n                href=\"#/\"\r\n                className={`mr-2 view-icon ${\r\n                  displayMode === 'imagelist' ? 'active' : ''\r\n                }`}\r\n                onClick={() => changeDisplayMode('imagelist')}\r\n              >\r\n                <ImageListIcon />\r\n              </a>\r\n            </span>\r\n\r\n            <div className=\"d-block d-md-inline-block pt-1\">\r\n              <UncontrolledDropdown className=\"mr-1 float-md-left btn-group mb-1\">\r\n                <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                  <IntlMessages id=\"pages.orderby\" />\r\n                  {selectedOrderOption.label}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                  {orderOptions.map((order, index) => {\r\n                    return (\r\n                      <DropdownItem\r\n                        key={index}\r\n                        onClick={() => changeOrderBy(order.column)}\r\n                      >\r\n                        {order.label}\r\n                      </DropdownItem>\r\n                    );\r\n                  })}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n              <div className=\"search-sm d-inline-block float-md-left mr-1 mb-1 align-top\">\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"keyword\"\r\n                  id=\"search\"\r\n                  placeholder={messages['menu.search']}\r\n                  onKeyPress={(e) => onSearchKey(e)}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"float-md-right pt-1\">\r\n              <span className=\"text-muted text-small mr-1\">{`${startIndex}-${endIndex} of ${totalItemCount} `}</span>\r\n              <UncontrolledDropdown className=\"d-inline-block\">\r\n                <DropdownToggle caret color=\"outline-dark\" size=\"xs\">\r\n                  {selectedPageSize}\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                  {pageSizes.map((size, index) => {\r\n                    return (\r\n                      <DropdownItem\r\n                        key={index}\r\n                        onClick={() => changePageSize(size)}\r\n                      >\r\n                        {size}\r\n                      </DropdownItem>\r\n                    );\r\n                  })}\r\n                </DropdownMenu>\r\n              </UncontrolledDropdown>\r\n            </div>\r\n          </Collapse>\r\n        </div>\r\n        <Separator className=\"mb-5\" />\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default injectIntl(ListPageHeading);\r\n","import React from 'react';\r\nimport {\r\n  CustomInput,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  Label,\r\n} from 'reactstrap';\r\nimport Select from 'react-select';\r\nimport CustomSelectInput from '../../components/common/CustomSelectInput';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nconst AddNewModal = ({ modalOpen, toggleModal, categories }) => {\r\n  return (\r\n    <Modal\r\n      isOpen={modalOpen}\r\n      toggle={toggleModal}\r\n      wrapClassName=\"modal-right\"\r\n      backdrop=\"static\"\r\n    >\r\n      <ModalHeader toggle={toggleModal}>\r\n        <IntlMessages id=\"pages.add-new-modal-title\" />\r\n      </ModalHeader>\r\n      <ModalBody>\r\n        <Label>\r\n          <IntlMessages id=\"pages.product-name\" />\r\n        </Label>\r\n        <Input />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.category\" />\r\n        </Label>\r\n        <Select\r\n          components={{ Input: CustomSelectInput }}\r\n          className=\"react-select\"\r\n          classNamePrefix=\"react-select\"\r\n          name=\"form-field-name\"\r\n          options={categories}\r\n        />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.description\" />\r\n        </Label>\r\n        <Input type=\"textarea\" name=\"text\" id=\"exampleText\" />\r\n        <Label className=\"mt-4\">\r\n          <IntlMessages id=\"pages.status\" />\r\n        </Label>\r\n        <CustomInput\r\n          type=\"radio\"\r\n          id=\"exCustomRadio\"\r\n          name=\"customRadio\"\r\n          label=\"ON HOLD\"\r\n        />\r\n        <CustomInput\r\n          type=\"radio\"\r\n          id=\"exCustomRadio2\"\r\n          name=\"customRadio\"\r\n          label=\"PROCESSED\"\r\n        />\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button color=\"secondary\" outline onClick={toggleModal}>\r\n          <IntlMessages id=\"pages.cancel\" />\r\n        </Button>\r\n        <Button color=\"primary\" onClick={toggleModal}>\r\n          <IntlMessages id=\"pages.submit\" />\r\n        </Button>{' '}\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddNewModal;\r\n","/* eslint-disable no-unused-expressions */\r\nimport mousetrap from 'mousetrap';\r\nimport { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Use mousetrap hook\r\n *\r\n * @param  {(string | string[])} handlerKey - A key, key combo or array of combos according to Mousetrap documentation.\r\n * @param  { function } handlerCallback - A function that is triggered on key combo catch.\r\n */\r\nexport default (handlerKey, handlerCallback) => {\r\n  const actionRef = useRef(null);\r\n  actionRef.current = handlerCallback;\r\n\r\n  useEffect(() => {\r\n    mousetrap.bind(handlerKey, (evt, combo) => {\r\n      typeof actionRef.current === 'function' && actionRef.current(evt, combo);\r\n      evt.preventDefault();\r\n    });\r\n    return () => {\r\n      mousetrap.unbind(handlerKey);\r\n    };\r\n  }, [handlerKey]);\r\n};\r\n","import React from 'react';\r\nimport { ContextMenu, MenuItem } from 'react-contextmenu';\r\n\r\nconst ContextMenuContainer = ({ onContextMenu, onContextMenuClick }) => {\r\n  return (\r\n    <ContextMenu id=\"menu_id\" onShow={(e) => onContextMenu(e, e.detail.data)}>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'copy' }}>\r\n        <i className=\"simple-icon-docs\" /> <span>Copy</span>\r\n      </MenuItem>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'move' }}>\r\n        <i className=\"simple-icon-drawer\" /> <span>Move to archive</span>\r\n      </MenuItem>\r\n      <MenuItem onClick={onContextMenuClick} data={{ action: 'delete' }}>\r\n        <i className=\"simple-icon-trash\" /> <span>Delete</span>\r\n      </MenuItem>\r\n    </ContextMenu>\r\n  );\r\n};\r\n\r\nexport default ContextMenuContainer;\r\n","import React from 'react';\r\nimport { Card, CustomInput, Badge } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { ContextMenuTrigger } from 'react-contextmenu';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\n\r\nconst DataListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx xxs=\"12\" className=\"mb-3\">\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={(event) => onCheckItem(event, product.id)}\r\n          className={classnames('d-flex flex-row', {\r\n            active: isSelect,\r\n          })}\r\n        >\r\n          <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\r\n            <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\r\n              <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n                <p className=\"list-item-heading mb-1 truncate\">\r\n                  {product.title}\r\n                </p>\r\n              </NavLink>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.category}\r\n              </p>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.date}\r\n              </p>\r\n              <div className=\"w-15 w-sm-100\">\r\n                <Badge color={product.statusColor} pill>\r\n                  {product.status}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox pl-1 align-self-center pr-4\">\r\n              <CustomInput\r\n                className=\"item-check mb-0\"\r\n                type=\"checkbox\"\r\n                id={`check_${product.id}`}\r\n                checked={isSelect}\r\n                onChange={() => {}}\r\n                label=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(DataListView);\r\n","import React from 'react';\r\nimport {\r\n  Row,\r\n  Card,\r\n  CardBody,\r\n  CardSubtitle,\r\n  CardImg,\r\n  CardText,\r\n  CustomInput,\r\n  Badge,\r\n} from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { ContextMenuTrigger } from 'react-contextmenu';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\n\r\nconst ImageListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx sm=\"6\" lg=\"4\" xl=\"3\" className=\"mb-3\" key={product.id}>\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={(event) => onCheckItem(event, product.id)}\r\n          className={classnames({\r\n            active: isSelect,\r\n          })}\r\n        >\r\n          <div className=\"position-relative\">\r\n            <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n              <CardImg top alt={product.title} src={product.img} />\r\n            </NavLink>\r\n            <Badge\r\n              color={product.statusColor}\r\n              pill\r\n              className=\"position-absolute badge-top-left\"\r\n            >\r\n              {product.status}\r\n            </Badge>\r\n          </div>\r\n          <CardBody>\r\n            <Row>\r\n              <Colxx xxs=\"2\">\r\n                <CustomInput\r\n                  className=\"item-check mb-0\"\r\n                  type=\"checkbox\"\r\n                  id={`check_${product.id}`}\r\n                  checked={isSelect}\r\n                  onChange={() => {}}\r\n                  label=\"\"\r\n                />\r\n              </Colxx>\r\n              <Colxx xxs=\"10\" className=\"mb-3\">\r\n                <CardSubtitle>{product.title}</CardSubtitle>\r\n                <CardText className=\"text-muted text-small mb-0 font-weight-light\">\r\n                  {product.date}\r\n                </CardText>\r\n              </Colxx>\r\n            </Row>\r\n          </CardBody>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(ImageListView);\r\n","import React from 'react';\r\nimport { Card, CustomInput, Badge } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classnames from 'classnames';\r\nimport { ContextMenuTrigger } from 'react-contextmenu';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\n\r\nconst ThumbListView = ({ product, isSelect, collect, onCheckItem }) => {\r\n  return (\r\n    <Colxx xxs=\"12\" key={product.id} className=\"mb-3\">\r\n      <ContextMenuTrigger id=\"menu_id\" data={product.id} collect={collect}>\r\n        <Card\r\n          onClick={(event) => onCheckItem(event, product.id)}\r\n          className={classnames('d-flex flex-row', {\r\n            active: isSelect,\r\n          })}\r\n        >\r\n          <NavLink to={`?p=${product.id}`} className=\"d-flex\">\r\n            <img\r\n              alt={product.title}\r\n              src={product.img}\r\n              className=\"list-thumbnail responsive border-0 card-img-left\"\r\n            />\r\n          </NavLink>\r\n          <div className=\"pl-2 d-flex flex-grow-1 min-width-zero\">\r\n            <div className=\"card-body align-self-center d-flex flex-column flex-lg-row justify-content-between min-width-zero align-items-lg-center\">\r\n              <NavLink to={`?p=${product.id}`} className=\"w-40 w-sm-100\">\r\n                <p className=\"list-item-heading mb-1 truncate\">\r\n                  {product.title}\r\n                </p>\r\n              </NavLink>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.category}\r\n              </p>\r\n              <p className=\"mb-1 text-muted text-small w-15 w-sm-100\">\r\n                {product.date}\r\n              </p>\r\n              <div className=\"w-15 w-sm-100\">\r\n                <Badge color={product.statusColor} pill>\r\n                  {product.status}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n            <div className=\"custom-control custom-checkbox pl-1 align-self-center pr-4\">\r\n              <CustomInput\r\n                className=\"item-check mb-0\"\r\n                type=\"checkbox\"\r\n                id={`check_${product.id}`}\r\n                checked={isSelect}\r\n                onChange={() => {}}\r\n                label=\"\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </ContextMenuTrigger>\r\n    </Colxx>\r\n  );\r\n};\r\n\r\n/* React.memo detail : https://reactjs.org/docs/react-api.html#reactpurecomponent  */\r\nexport default React.memo(ThumbListView);\r\n","import React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport Pagination from './Pagination';\r\nimport ContextMenuContainer from './ContextMenuContainer';\r\nimport DataListView from './DataListView';\r\nimport ImageListView from './ImageListView';\r\nimport ThumbListView from './ThumbListView';\r\n\r\nfunction collect(props) {\r\n  return { data: props.data };\r\n}\r\n\r\nconst ListPageListing = ({\r\n  items,\r\n  displayMode,\r\n  selectedItems,\r\n  onCheckItem,\r\n  currentPage,\r\n  totalPage,\r\n  onContextMenuClick,\r\n  onContextMenu,\r\n  onChangePage,\r\n}) => {\r\n  return (\r\n    <Row>\r\n      {items.map((product) => {\r\n        if (displayMode === 'imagelist') {\r\n          return (\r\n            <ImageListView\r\n              key={product.id}\r\n              product={product}\r\n              isSelect={selectedItems.includes(product.id)}\r\n              collect={collect}\r\n              onCheckItem={onCheckItem}\r\n            />\r\n          );\r\n        }\r\n        if (displayMode === 'thumblist') {\r\n          return (\r\n            <ThumbListView\r\n              key={product.id}\r\n              product={product}\r\n              isSelect={selectedItems.includes(product.id)}\r\n              collect={collect}\r\n              onCheckItem={onCheckItem}\r\n            />\r\n          );\r\n        }\r\n        return (\r\n          <DataListView\r\n            key={product.id}\r\n            product={product}\r\n            isSelect={selectedItems.includes(product.id)}\r\n            onCheckItem={onCheckItem}\r\n            collect={collect}\r\n          />\r\n        );\r\n      })}\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        totalPage={totalPage}\r\n        onChangePage={(i) => onChangePage(i)}\r\n      />\r\n      <ContextMenuContainer\r\n        onContextMenuClick={onContextMenuClick}\r\n        onContextMenu={onContextMenu}\r\n      />\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default React.memo(ListPageListing);\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport axios from 'axios';\r\n\r\nimport { servicePath } from '../../../../constants/defaultValues';\r\n\r\nimport ListPageHeading from '../../../../containers/pages/ListPageHeading';\r\nimport AddNewModal from '../../../../containers/pages/AddNewModal';\r\nimport ListPageListing from '../../../../containers/pages/ListPageListing';\r\nimport useMousetrap from '../../../../hooks/use-mousetrap';\r\n\r\nconst getIndex = (value, arr, prop) => {\r\n  for (let i = 0; i < arr.length; i += 1) {\r\n    if (arr[i][prop] === value) {\r\n      return i;\r\n    }\r\n  }\r\n  return -1;\r\n};\r\n\r\nconst apiUrl = `${servicePath}/cakes/paging`;\r\n\r\nconst orderOptions = [\r\n  { column: 'title', label: 'Product Name' },\r\n  { column: 'category', label: 'Category' },\r\n  { column: 'status', label: 'Status' },\r\n];\r\nconst pageSizes = [4, 8, 12, 20];\r\n\r\nconst categories = [\r\n  { label: 'Cakes', value: 'Cakes', key: 0 },\r\n  { label: 'Cupcakes', value: 'Cupcakes', key: 1 },\r\n  { label: 'Desserts', value: 'Desserts', key: 2 },\r\n];\r\n\r\nconst DataListPages = ({ match }) => {\r\n  const [isLoaded, setIsLoaded] = useState(false);\r\n  const [displayMode, setDisplayMode] = useState('list');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [selectedPageSize, setSelectedPageSize] = useState(8);\r\n  const [selectedOrderOption, setSelectedOrderOption] = useState({\r\n    column: 'title',\r\n    label: 'Product Name',\r\n  });\r\n\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [totalItemCount, setTotalItemCount] = useState(0);\r\n  const [totalPage, setTotalPage] = useState(1);\r\n  const [search, setSearch] = useState('');\r\n  const [selectedItems, setSelectedItems] = useState([]);\r\n  const [items, setItems] = useState([]);\r\n  const [lastChecked, setLastChecked] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setCurrentPage(1);\r\n  }, [selectedPageSize, selectedOrderOption]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      axios\r\n        .get(\r\n          `${apiUrl}?pageSize=${selectedPageSize}&currentPage=${currentPage}&orderBy=${selectedOrderOption.column}&search=${search}`\r\n        )\r\n        .then((res) => {\r\n          return res.data;\r\n        })\r\n        .then((data) => {\r\n          setTotalPage(data.totalPage);\r\n          setItems(data.data);\r\n          setSelectedItems([]);\r\n          setTotalItemCount(data.totalItem);\r\n          setIsLoaded(true);\r\n        });\r\n    }\r\n    fetchData();\r\n  }, [selectedPageSize, currentPage, selectedOrderOption, search]);\r\n\r\n  const onCheckItem = (event, id) => {\r\n    if (\r\n      event.target.tagName === 'A' ||\r\n      (event.target.parentElement && event.target.parentElement.tagName === 'A')\r\n    ) {\r\n      return true;\r\n    }\r\n    if (lastChecked === null) {\r\n      setLastChecked(id);\r\n    }\r\n\r\n    let selectedList = [...selectedItems];\r\n    if (selectedList.includes(id)) {\r\n      selectedList = selectedList.filter((x) => x !== id);\r\n    } else {\r\n      selectedList.push(id);\r\n    }\r\n    setSelectedItems(selectedList);\r\n\r\n    if (event.shiftKey) {\r\n      let newItems = [...items];\r\n      const start = getIndex(id, newItems, 'id');\r\n      const end = getIndex(lastChecked, newItems, 'id');\r\n      newItems = newItems.slice(Math.min(start, end), Math.max(start, end) + 1);\r\n      selectedItems.push(\r\n        ...newItems.map((item) => {\r\n          return item.id;\r\n        })\r\n      );\r\n      selectedList = Array.from(new Set(selectedItems));\r\n      setSelectedItems(selectedList);\r\n    }\r\n    document.activeElement.blur();\r\n    return false;\r\n  };\r\n\r\n  const handleChangeSelectAll = (isToggle) => {\r\n    if (selectedItems.length >= items.length) {\r\n      if (isToggle) {\r\n        setSelectedItems([]);\r\n      }\r\n    } else {\r\n      setSelectedItems(items.map((x) => x.id));\r\n    }\r\n    document.activeElement.blur();\r\n    return false;\r\n  };\r\n\r\n  const onContextMenuClick = (e, data) => {\r\n    // params : (e,data,target)\r\n    console.log('onContextMenuClick - selected items', selectedItems);\r\n    console.log('onContextMenuClick - action : ', data.action);\r\n  };\r\n\r\n  const onContextMenu = (e, data) => {\r\n    const clickedProductId = data.data;\r\n    if (!selectedItems.includes(clickedProductId)) {\r\n      setSelectedItems([clickedProductId]);\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  useMousetrap(['ctrl+a', 'command+a'], () => {\r\n    handleChangeSelectAll(false);\r\n  });\r\n\r\n  useMousetrap(['ctrl+d', 'command+d'], () => {\r\n    setSelectedItems([]);\r\n    return false;\r\n  });\r\n\r\n  const startIndex = (currentPage - 1) * selectedPageSize;\r\n  const endIndex = currentPage * selectedPageSize;\r\n\r\n  return !isLoaded ? (\r\n    <div className=\"loading\" />\r\n  ) : (\r\n    <>\r\n      <div className=\"disable-text-selection\">\r\n        <ListPageHeading\r\n          heading=\"menu.data-list\"\r\n          displayMode={displayMode}\r\n          changeDisplayMode={setDisplayMode}\r\n          handleChangeSelectAll={handleChangeSelectAll}\r\n          changeOrderBy={(column) => {\r\n            setSelectedOrderOption(\r\n              orderOptions.find((x) => x.column === column)\r\n            );\r\n          }}\r\n          changePageSize={setSelectedPageSize}\r\n          selectedPageSize={selectedPageSize}\r\n          totalItemCount={totalItemCount}\r\n          selectedOrderOption={selectedOrderOption}\r\n          match={match}\r\n          startIndex={startIndex}\r\n          endIndex={endIndex}\r\n          selectedItemsLength={selectedItems ? selectedItems.length : 0}\r\n          itemsLength={items ? items.length : 0}\r\n          onSearchKey={(e) => {\r\n            if (e.key === 'Enter') {\r\n              setSearch(e.target.value.toLowerCase());\r\n            }\r\n          }}\r\n          orderOptions={orderOptions}\r\n          pageSizes={pageSizes}\r\n          toggleModal={() => setModalOpen(!modalOpen)}\r\n        />\r\n        <AddNewModal\r\n          modalOpen={modalOpen}\r\n          toggleModal={() => setModalOpen(!modalOpen)}\r\n          categories={categories}\r\n        />\r\n        <ListPageListing\r\n          items={items}\r\n          displayMode={displayMode}\r\n          selectedItems={selectedItems}\r\n          onCheckItem={onCheckItem}\r\n          currentPage={currentPage}\r\n          totalPage={totalPage}\r\n          onContextMenuClick={onContextMenuClick}\r\n          onContextMenu={onContextMenu}\r\n          onChangePage={setCurrentPage}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DataListPages;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nconst getMenuTitle = (sub) => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return '';\r\n  }\r\n  return path.split(sub)[0] + sub;\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <>\r\n      {heading && (\r\n        <h1>\r\n          <IntlMessages id={heading} />\r\n        </h1>\r\n      )}\r\n      <BreadcrumbItems match={match} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split('/');\r\n  if (paths[paths.length - 1].indexOf(':') > -1) {\r\n    paths = paths.filter((x) => x.indexOf(':') === -1);\r\n  }\r\n  return (\r\n    <>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n"],"sourceRoot":""}