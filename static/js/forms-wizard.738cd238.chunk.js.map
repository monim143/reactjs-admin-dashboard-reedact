{"version":3,"sources":["components/wizard/BottomNavigation.js","components/wizard/TopNavigation.js","containers/wizard/Basic.js","containers/wizard/LastStepEnd.js","containers/wizard/TopNavDisabled.js","containers/wizard/Validation.js","containers/wizard/Layouts.js","views/app/ui/forms/wizard.js","containers/navs/Breadcrumb.js"],"names":["BottomNavigation","className","onClickPrev","prevLabel","onClickNext","nextLabel","render","next","previous","step","steps","Button","color","indexOf","onClick","length","TopNavigation","disableNav","topNavClick","getClassName","index","stepItem","isDone","push","go","map","hideTopNav","key","to","location","itemClick","name","desc","injectIntl","intl","useState","setName","email","setEmail","password","setPassword","messages","Card","CardBody","id","Form","FormGroup","Label","IntlMessages","Input","type","placeholder","value","onChange","e","target","goToNext","goToPrev","bottomNavHidden","setBottomNavHidden","topNavDisabled","setTopNavDisabled","validateEmail","error","test","validateName","validatePassword","forms","createRef","loading","setLoading","valid","fields","setFields","innerRef","initialValues","onSubmit","errors","touched","validate","Spinner","formIndex","form","current","submitForm","then","newFields","values","setTimeout","Row","xxs","xl","FormWizard","match","Breadcrumb","heading","getMenuTitle","sub","getUrl","path","split","BreadcrumbItems","substr","paths","filter","x","active","BreadcrumbContainer"],"mappings":"6QA4CeA,EArCU,SAAC,GAMnB,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,YACAC,EACI,EADJA,UAEA,OACE,kBAAC,aAAD,CACEC,OAAQ,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,MAAzB,OACN,yBAAKT,UAAS,yBAAoBA,IAChC,kBAACU,EAAA,EAAD,CACEC,MAAM,UACNX,UAAS,eAAUS,EAAMG,QAAQJ,IAAS,EAAI,WAAa,IAC3DK,QAAS,WACPZ,EAAYM,EAAUE,EAAOD,KAG9BN,GAGH,kBAACQ,EAAA,EAAD,CACEC,MAAM,UACNX,UACES,EAAMG,QAAQJ,IAASC,EAAMK,OAAS,EAAI,WAAa,GAEzDD,QAAS,WACPV,EAAYG,EAAMG,EAAOD,KAG1BJ,Q,QC6BEW,EA3DO,SAAC,GAA4C,IAA1Cf,EAAyC,EAAzCA,UAAWgB,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,YACxCC,EAAe,SAACT,EAAOD,EAAMW,EAAOC,GACxC,OAAIX,EAAMG,QAAQJ,KAAUW,EACnB,aAELV,EAAMG,QAAQJ,GAAQW,GAASC,EAASC,QAC1CD,EAASC,QAAS,EACX,aAEF,QAUT,OACE,kBAAC,aAAD,CACEhB,OAAQ,cAAGC,KAAH,EAASC,SAAT,IAAmBC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,MAAWa,GAApC,EAAgCC,GAAhC,EAAoCD,MAApC,OACN,wBACEtB,UAAS,uBAAkBA,GAAlB,OACPgB,EAAa,YAAc,KAG5BP,EAAMe,KAAI,SAACJ,EAAUD,GACpB,OAAKC,EAASK,WAuBP,0BAAMC,IAAG,qBAAgBP,KArB5B,wBACEO,IAAG,qBAAgBP,GACnBnB,UAAS,mBAAckB,EACrBT,EACAD,EACAW,EACAC,KAGF,kBAAC,IAAD,CACEO,GAAG,IACHC,SAAU,GACV5B,UAAU,WACVa,QAAS,kBA/BT,SAACO,EAAUE,GACvBN,GAGJC,EAAYG,EAAUE,GA2BSO,CAAUT,EAAUE,KAEnC,8BAAOF,EAASU,MAChB,+BAAQV,EAASW,gBCgFtBC,eA5HD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACFC,mBAAS,IADP,mBACnBJ,EADmB,KACbK,EADa,OAEAD,mBAAS,IAFT,mBAEnBE,EAFmB,KAEZC,EAFY,OAGMH,mBAAS,IAHf,mBAGnBI,EAHmB,KAGTC,EAHS,KAwBlBC,EAAaP,EAAbO,SACR,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU1C,UAAU,yBAClB,kBAAC,SAAD,KACE,kBAAC,EAAD,CACEA,UAAU,yBACVgB,YAAY,EACZC,YA3BU,SAACG,EAAUE,GAC7BA,EAAKF,EAASuB,OA4BR,kBAAC,QAAD,KACE,kBAAC,OAAD,CACEA,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,gBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,OACLnB,KAAK,OACLoB,YAAaV,EAAS,cACtBW,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOlB,EAAQkB,EAAEC,OAAOH,cAM5C,kBAAC,OAAD,CACER,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,iBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,QACLnB,KAAK,QACLoB,YAAaV,EAAS,eACtBW,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAASgB,EAAEC,OAAOH,cAM7C,kBAAC,OAAD,CACER,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,oBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,WACLnB,KAAK,WACLoB,YAAaV,EAAS,kBACtBW,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAYc,EAAEC,OAAOH,cAMhD,kBAAC,OAAD,CAAMR,GAAG,QAAQlB,YAAU,GACzB,yBAAKzB,UAAU,iCACb,wBAAIA,UAAU,QACZ,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,2BAEnB,2BACE,kBAACI,EAAA,EAAD,CAAcJ,GAAG,0BAKzB,kBAAC,EAAD,CACExC,YAxGU,SAACoD,EAAU9C,EAAOD,GACpCA,EAAKa,QAAS,EACVZ,EAAMK,OAAS,GAAKL,EAAMG,QAAQJ,IAGtC+C,KAoGQtD,YAjGU,SAACuD,EAAU/C,EAAOD,GAChCC,EAAMG,QAAQJ,IAAS,GAG3BgD,KA8FQxD,UAAU,yBACVE,UAAWsC,EAAS,eACpBpC,UAAWoC,EAAS,uBCkBjBR,eAvIK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACRC,mBAAS,IADD,mBACzBJ,EADyB,KACnBK,EADmB,OAEND,mBAAS,IAFH,mBAEzBE,EAFyB,KAElBC,EAFkB,OAGAH,mBAAS,IAHT,mBAGzBI,EAHyB,KAGfC,EAHe,OAIcL,oBAAS,GAJvB,mBAIzBuB,EAJyB,KAIRC,EAJQ,OAKYxB,oBAAS,GALrB,mBAKzByB,EALyB,KAKTC,EALS,KAiCxBpB,EAAaP,EAAbO,SACR,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU1C,UAAU,yBAClB,kBAAC,SAAD,KACE,kBAAC,EAAD,CACEA,UAAU,yBACVgB,YAAY,EACZC,YAlCU,SAACG,EAAUE,GACzBqC,GAGJrC,EAAKF,EAASuB,OAgCR,kBAAC,QAAD,KACE,kBAAC,OAAD,CACEA,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,gBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,OACLnB,KAAK,OACLoB,YAAaV,EAAS,cACtBW,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOlB,EAAQkB,EAAEC,OAAOH,cAM5C,kBAAC,OAAD,CACER,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,iBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,QACLnB,KAAK,QACLoB,YAAaV,EAAS,eACtBW,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAASgB,EAAEC,OAAOH,cAM7C,kBAAC,OAAD,CACER,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,oBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,WACLnB,KAAK,WACLoB,YAAaV,EAAS,kBACtBW,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAYc,EAAEC,OAAOH,cAMhD,kBAAC,OAAD,CAAMR,GAAG,QAAQlB,YAAU,GACzB,yBAAKzB,UAAU,iCACb,wBAAIA,UAAU,QACZ,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,2BAEnB,2BACE,kBAACI,EAAA,EAAD,CAAcJ,GAAG,0BAKzB,kBAAC,EAAD,CACExC,YA5GU,SAACoD,EAAU9C,EAAOD,GACpCA,EAAKa,QAAS,EACVZ,EAAMK,OAAS,GAAKL,EAAMG,QAAQJ,KACpCkD,GAAmB,GACnBE,GAAkB,IAEhBnD,EAAMK,OAAS,GAAKL,EAAMG,QAAQJ,IAGtC+C,KAoGQtD,YAjGU,SAACuD,EAAU/C,EAAOD,GAChCC,EAAMG,QAAQJ,IAAS,GAG3BgD,KA8FQxD,UAAS,iCACPyD,GAAmB,aAErBvD,UAAWsC,EAAS,eACpBpC,UAAWoC,EAAS,uBCHjBR,eA7HQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACXC,mBAAS,IADE,mBAC5BJ,EAD4B,KACtBK,EADsB,OAETD,mBAAS,IAFA,mBAE5BE,EAF4B,KAErBC,EAFqB,OAGHH,mBAAS,IAHN,mBAG5BI,EAH4B,KAGlBC,EAHkB,KAwB3BC,EAAaP,EAAbO,SACR,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU1C,UAAU,yBAClB,kBAAC,SAAD,KACE,kBAAC,EAAD,CACEA,UAAU,yBACVgB,YAAU,EACVC,YA3BU,SAACG,EAAUE,GAC7BA,EAAKF,EAASuB,OA4BR,kBAAC,QAAD,KACE,kBAAC,OAAD,CACEA,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,gBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,OACLnB,KAAK,OACLoB,YAAaV,EAAS,cACtBW,MAAOrB,EACPsB,SAAU,SAACC,GAAD,OAAOlB,EAAQkB,EAAEC,OAAOH,cAM5C,kBAAC,OAAD,CACER,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,iBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,QACLnB,KAAK,QACLoB,YAAaV,EAAS,eACtBW,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAASgB,EAAEC,OAAOH,cAM7C,kBAAC,OAAD,CACER,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC4C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcJ,GAAG,oBAEnB,kBAACK,EAAA,EAAD,CACEC,KAAK,WACLnB,KAAK,WACLoB,YAAaV,EAAS,kBACtBW,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAYc,EAAEC,OAAOH,cAMhD,kBAAC,OAAD,CAAMR,GAAG,QAAQlB,YAAU,GACzB,yBAAKzB,UAAU,iCACb,wBAAIA,UAAU,QACZ,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,2BAEnB,2BACE,kBAACI,EAAA,EAAD,CAAcJ,GAAG,0BAKzB,kBAAC,EAAD,CACExC,YAxGU,SAACoD,EAAU9C,EAAOD,GACpCA,EAAKa,QAAS,EACVZ,EAAMK,OAAS,GAAKL,EAAMG,QAAQJ,IAGtC+C,KAoGQtD,YAjGU,SAACuD,EAAU/C,EAAOD,GAChCC,EAAMG,QAAQJ,IAAS,GAG3BgD,KA8FQxD,UAAU,yBACVE,UAAWsC,EAAS,eACpBpC,UAAWoC,EAAS,uB,2BCpH1BqB,EAAgB,SAACV,GACrB,IAAIW,EAMJ,OALKX,EAEO,4CAA4CY,KAAKZ,KAC3DW,EAAQ,yBAFRA,EAAQ,kCAIHA,GAGHE,EAAe,SAACb,GACpB,IAAIW,EAMJ,OALKX,EAEMA,EAAMrC,OAAS,IACxBgD,EAAQ,0CAFRA,EAAQ,yBAIHA,GAGHG,EAAmB,SAACd,GACxB,IAAIW,EAMJ,OALKX,EAEMA,EAAMrC,OAAS,IACxBgD,EAAQ,6CAFRA,EAAQ,6BAIHA,GA+MM9B,eA5MI,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACdiC,EAAQ,CAACC,oBAAU,MAAOA,oBAAU,MAAOA,oBAAU,OAD5B,EAEejC,oBAAS,GAFxB,mBAExBuB,EAFwB,KAEPC,EAFO,OAGDxB,oBAAS,GAHR,mBAGxBkC,EAHwB,KAGfC,EAHe,OAIHnC,mBAAS,CACnC,CACEoC,OAAO,EACPxC,KAAM,OACNqB,MAAO,IAET,CACEmB,OAAO,EACPxC,KAAM,QACNqB,MAAO,IAET,CACEmB,OAAO,EACPxC,KAAM,WACNqB,MAAO,MAlBoB,mBAIxBoB,EAJwB,KAIhBC,EAJgB,KA6DvBhC,EAAaP,EAAbO,SACR,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU1C,UAAU,yBAClB,kBAAC,SAAD,KACE,kBAAC,EAAD,CAAeA,UAAU,yBAAyBgB,YAAU,IAC5D,kBAAC,QAAD,KACE,kBAAC,OAAD,CACE2B,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC,IAAD,CACEyE,SAAUP,EAAM,GAChBQ,cAAe,CACb5C,KAAMyC,EAAO,GAAGpB,OAElBwB,SAAU,eAET,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,kBAAC,IAAD,CAAM7E,UAAU,kCACd,kBAAC6C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAQN,EAAS,eACjB,kBAAC,IAAD,CACExC,UAAU,eACV8B,KAAK,OACLgD,SAAUd,IAEXY,EAAO9C,MAAQ+C,EAAQ/C,MACtB,yBAAK9B,UAAU,4BACZ4E,EAAO9C,aASxB,kBAAC,OAAD,CACEa,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC,IAAD,CACEyE,SAAUP,EAAM,GAChBQ,cAAe,CACbtC,MAAOmC,EAAO,GAAGpB,OAEnBwB,SAAU,eAET,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,kBAAC,IAAD,CAAM7E,UAAU,kCACd,kBAAC6C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAQN,EAAS,gBACjB,kBAAC,IAAD,CACExC,UAAU,eACV8B,KAAK,QACLgD,SAAUjB,IAEXe,EAAOxC,OAASyC,EAAQzC,OACvB,yBAAKpC,UAAU,4BACZ4E,EAAOxC,cASxB,kBAAC,OAAD,CACEO,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,kBAAC,IAAD,CACEyE,SAAUP,EAAM,GAChBQ,cAAe,CACbpC,SAAUiC,EAAO,GAAGpB,OAEtBwB,SAAU,eAET,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,kBAAC,IAAD,CAAM7E,UAAU,6CACd,kBAAC6C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAAQN,EAAS,mBACjB,kBAAC,IAAD,CACExC,UAAU,eACV8B,KAAK,WACLmB,KAAK,WACL6B,SAAUb,IAEXW,EAAOtC,UAAYuC,EAAQvC,UAC1B,yBAAKtC,UAAU,4BACZ4E,EAAOtC,iBASxB,kBAAC,OAAD,CAAMK,GAAG,QAAQlB,YAAU,GACzB,yBAAKzB,UAAU,sCACZoE,EACC,6BACE,kBAACW,EAAA,EAAD,CAASpE,MAAM,UAAUX,UAAU,SACnC,2BACE,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,mBAIrB,6BACE,wBAAI3C,UAAU,QACZ,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,2BAEnB,2BACE,kBAACI,EAAA,EAAD,CAAcJ,GAAG,2BAO7B,kBAAC,EAAD,CACExC,YAlKU,SAACoD,EAAU9C,EAAOD,GACpC,KAAIC,EAAMK,OAAS,GAAKL,EAAMG,QAAQJ,IAAtC,CAGA,IAAMwE,EAAYvE,EAAMG,QAAQJ,GAC1ByE,EAAOf,EAAMc,GAAWE,QACtBpD,EAASyC,EAAOS,GAAhBlD,KACRmD,EAAKE,aAAaC,MAAK,WACrB,IAAMC,EAAS,YAAOd,GAEtBc,EAAUL,GAAW7B,MAAQ8B,EAAKK,OAAOxD,GACzCuD,EAAUL,GAAWV,OAASW,EAAKL,OAAO9C,GAC1C0C,EAAUa,IAELJ,EAAKL,OAAO9C,IAASmD,EAAKJ,QAAQ/C,KACrCyB,IACA/C,EAAKa,QAAS,EACVZ,EAAMK,OAAS,GAAKL,EAAMG,QAAQJ,KACpCkD,GAAmB,GAxBzBW,GAAW,GACXkB,YAAW,WACTlB,GAAW,KACV,YAsKKpE,YA1IU,SAACuD,EAAU/C,EAAOD,GAChCC,EAAMG,QAAQJ,IAAS,GAG3BgD,KAuIQxD,UAAS,iCACPyD,GAAmB,aAErBvD,UAAWsC,EAAS,eACpBpC,UAAWoC,EAAS,uBCnFjBR,eAhJC,SAAC,GAAc,IACvBf,EAAc,SAACG,EAAUE,GAC7BA,EAAKF,EAASuB,KAGVxC,EAAc,SAACoD,EAAU9C,EAAOD,GACpCA,EAAKa,QAAS,EACVZ,EAAMK,OAAS,GAAKL,EAAMG,QAAQJ,IAGtC+C,KAGItD,EAAc,SAACuD,EAAU/C,EAAOD,GAChCC,EAAMG,QAAQJ,IAAS,GAG3BgD,KAGMhB,EApBoB,EAAXP,KAoBTO,SACR,OACE,kBAACgD,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOC,IAAI,KAAKC,GAAG,IAAI1F,UAAU,QAC/B,kBAACyC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU1C,UAAU,yBAClB,kBAAC,SAAD,KACE,kBAAC,EAAD,CACEA,UAAU,0BACVgB,YAAY,EACZC,YAAaA,IAEf,kBAAC,QAAD,KACE,kBAAC,OAAD,CACE0B,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,iCACb,2BACE,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,wBAIvB,kBAAC,OAAD,CACEA,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,iCACb,2BACE,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,wBAIvB,kBAAC,OAAD,CACEA,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,sBACff,YAAU,GAEV,yBAAKzB,UAAU,iCACb,wBAAIA,UAAU,QACZ,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,2BAEnB,2BACE,kBAACI,EAAA,EAAD,CAAcJ,GAAG,yBAKzB,kBAAC,EAAD,CACExC,YAAaA,EACbF,YAAaA,EACbD,UAAU,0BACVE,UAAWsC,EAAS,eACpBpC,UAAWoC,EAAS,qBAM9B,kBAAC,IAAD,CAAOiD,IAAI,KAAKC,GAAG,KACjB,kBAACjD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAU1C,UAAU,yBAClB,kBAAC,SAAD,KACE,kBAAC,EAAD,CACEA,UAAU,wBACVgB,YAAY,EACZC,YAAaA,IAEf,kBAAC,QAAD,KACE,kBAAC,OAAD,CACE0B,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,2BACE,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,wBAIvB,kBAAC,OAAD,CACEA,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,uBAEf,yBAAKxC,UAAU,qBACb,2BACE,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,wBAIvB,kBAAC,OAAD,CACEA,GAAG,QACHb,KAAMU,EAAS,sBACfT,KAAMS,EAAS,sBACff,YAAU,GAEV,yBAAKzB,UAAU,qBACb,wBAAIA,UAAU,QACZ,kBAAC+C,EAAA,EAAD,CAAcJ,GAAG,2BAEnB,2BACE,kBAACI,EAAA,EAAD,CAAcJ,GAAG,yBAKzB,kBAAC,EAAD,CACExC,YAAaA,EACbF,YAAaA,EACbD,UAAU,wBACVE,UAAWsC,EAAS,eACpBpC,UAAWoC,EAAS,yBClGrBmD,UAlCI,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACpB,OACE,oCACE,kBAACJ,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOC,IAAI,MACT,kBAACI,EAAA,EAAD,CAAYC,QAAQ,mBAAmBF,MAAOA,IAC9C,kBAAC,IAAD,CAAW5F,UAAU,WAGzB,kBAACwF,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOC,IAAI,KAAKzF,UAAU,QACxB,wBAAIA,UAAU,QAAd,SACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOyF,IAAI,KAAKzF,UAAU,QACxB,wBAAIA,UAAU,QAAd,iBACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOyF,IAAI,KAAKzF,UAAU,QACxB,wBAAIA,UAAU,QAAd,2BACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOyF,IAAI,KAAKzF,UAAU,QACxB,wBAAIA,UAAU,QAAd,cACA,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOyF,IAAI,KAAKzF,UAAU,QACxB,wBAAIA,UAAU,QAAd,WACA,kBAAC,EAAD,W,gCCzCV,sDAMM+F,EAAe,SAACC,GACpB,OAAO,kBAAC,IAAD,CAAcrD,GAAE,eAAUqD,MAG7BC,EAAS,SAACC,EAAMF,EAAK7E,GACzB,OAAc,IAAVA,EACK,GAEF+E,EAAKC,MAAMH,GAAK,GAAKA,GAgBxBI,EAAkB,SAAC,GAAe,IAChCF,EAD+B,EAAZN,MACNM,KAAKG,OAAO,GAC3BC,EAAQJ,EAAKC,MAAM,KAIvB,OAHIG,EAAMA,EAAMxF,OAAS,GAAGF,QAAQ,MAAQ,IAC1C0F,EAAQA,EAAMC,QAAO,SAACC,GAAD,OAA2B,IAApBA,EAAE5F,QAAQ,SAGtC,oCACE,kBAAC,IAAD,CAAYZ,UAAU,iEACnBsG,EAAM9E,KAAI,SAACwE,EAAK7E,GACf,OACE,kBAAC,IAAD,CAAgBO,IAAKP,EAAOsF,OAAQH,EAAMxF,SAAWK,EAAQ,GAC1DmF,EAAMxF,SAAWK,EAAQ,EACxB,kBAAC,IAAD,CAASQ,GAAE,WAAMsE,EAAOC,EAAMF,EAAK7E,KAChC4E,EAAaC,IAGhBD,EAAaC,UAUdU,IAxCa,SAAC,GAAwB,IAAtBZ,EAAqB,EAArBA,QAASF,EAAY,EAAZA,MACtC,OACE,oCACGE,GACC,4BACE,kBAAC,IAAD,CAAcnD,GAAImD,KAGtB,kBAACM,EAAD,CAAiBR,MAAOA","file":"static/js/forms-wizard.738cd238.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { WithWizard } from 'react-albus';\r\nimport { Button } from 'reactstrap';\r\n\r\nconst BottomNavigation = ({\r\n  className,\r\n  onClickPrev,\r\n  prevLabel,\r\n  onClickNext,\r\n  nextLabel,\r\n}) => {\r\n  return (\r\n    <WithWizard\r\n      render={({ next, previous, step, steps }) => (\r\n        <div className={`wizard-buttons ${className}`}>\r\n          <Button\r\n            color=\"primary\"\r\n            className={`mr-1 ${steps.indexOf(step) <= 0 ? 'disabled' : ''}`}\r\n            onClick={() => {\r\n              onClickPrev(previous, steps, step);\r\n            }}\r\n          >\r\n            {prevLabel}\r\n          </Button>\r\n\r\n          <Button\r\n            color=\"primary\"\r\n            className={\r\n              steps.indexOf(step) >= steps.length - 1 ? 'disabled' : ''\r\n            }\r\n            onClick={() => {\r\n              onClickNext(next, steps, step);\r\n            }}\r\n          >\r\n            {nextLabel}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    />\r\n  );\r\n};\r\nexport default BottomNavigation;\r\n","/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable no-unused-vars */\r\n/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { WithWizard } from 'react-albus';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst TopNavigation = ({ className, disableNav, topNavClick }) => {\r\n  const getClassName = (steps, step, index, stepItem) => {\r\n    if (steps.indexOf(step) === index) {\r\n      return 'step-doing';\r\n    }\r\n    if (steps.indexOf(step) > index || stepItem.isDone) {\r\n      stepItem.isDone = true;\r\n      return 'step-done';\r\n    }\r\n    return 'step';\r\n  };\r\n\r\n  const itemClick = (stepItem, push) => {\r\n    if (disableNav) {\r\n      return;\r\n    }\r\n    topNavClick(stepItem, push);\r\n  };\r\n\r\n  return (\r\n    <WithWizard\r\n      render={({ next, previous, step, steps, go, push }) => (\r\n        <ul\r\n          className={`nav nav-tabs ${className}${\r\n            disableNav ? ' disabled' : ''\r\n          }`}\r\n        >\r\n          {steps.map((stepItem, index) => {\r\n            if (!stepItem.hideTopNav) {\r\n              return (\r\n                <li\r\n                  key={`topNavStep_${index}`}\r\n                  className={`nav-item ${getClassName(\r\n                    steps,\r\n                    step,\r\n                    index,\r\n                    stepItem\r\n                  )}`}\r\n                >\r\n                  <NavLink\r\n                    to=\"#\"\r\n                    location={{}}\r\n                    className=\"nav-link\"\r\n                    onClick={() => itemClick(stepItem, push)}\r\n                  >\r\n                    <span>{stepItem.name}</span>\r\n                    <small>{stepItem.desc}</small>\r\n                  </NavLink>\r\n                </li>\r\n              );\r\n            }\r\n            return <span key={`topNavStep_${index}`} />;\r\n          })}\r\n        </ul>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TopNavigation;\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { useState } from 'react';\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\r\nimport TopNavigation from '../../components/wizard/TopNavigation';\r\n\r\nconst Basic = ({ intl }) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const topNavClick = (stepItem, push) => {\r\n    push(stepItem.id);\r\n  };\r\n\r\n  const onClickNext = (goToNext, steps, step) => {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  };\r\n\r\n  const onClickPrev = (goToPrev, steps, step) => {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  };\r\n\r\n  const { messages } = intl;\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard wizard-default\">\r\n        <Wizard>\r\n          <TopNavigation\r\n            className=\"justify-content-center\"\r\n            disableNav={false}\r\n            topNavClick={topNavClick}\r\n          />\r\n          <Steps>\r\n            <Step\r\n              id=\"step1\"\r\n              name={messages['wizard.step-name-1']}\r\n              desc={messages['wizard.step-desc-1']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.name\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder={messages['forms.name']}\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step2\"\r\n              name={messages['wizard.step-name-2']}\r\n              desc={messages['wizard.step-desc-2']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.email\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder={messages['forms.email']}\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step3\"\r\n              name={messages['wizard.step-name-3']}\r\n              desc={messages['wizard.step-desc-3']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.password\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      placeholder={messages['forms.password']}\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step id=\"step4\" hideTopNav>\r\n              <div className=\"wizard-basic-step text-center\">\r\n                <h2 className=\"mb-2\">\r\n                  <IntlMessages id=\"wizard.content-thanks\" />\r\n                </h2>\r\n                <p>\r\n                  <IntlMessages id=\"wizard.registered\" />\r\n                </p>\r\n              </div>\r\n            </Step>\r\n          </Steps>\r\n          <BottomNavigation\r\n            onClickNext={onClickNext}\r\n            onClickPrev={onClickPrev}\r\n            className=\"justify-content-center\"\r\n            prevLabel={messages['wizard.prev']}\r\n            nextLabel={messages['wizard.next']}\r\n          />\r\n        </Wizard>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nexport default injectIntl(Basic);\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { useState } from 'react';\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\r\nimport TopNavigation from '../../components/wizard/TopNavigation';\r\n\r\nconst LastStepEnd = ({ intl }) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [bottomNavHidden, setBottomNavHidden] = useState(false);\r\n  const [topNavDisabled, setTopNavDisabled] = useState(false);\r\n\r\n  const topNavClick = (stepItem, push) => {\r\n    if (topNavDisabled) {\r\n      return;\r\n    }\r\n    push(stepItem.id);\r\n  };\r\n\r\n  const onClickNext = (goToNext, steps, step) => {\r\n    step.isDone = true;\r\n    if (steps.length - 2 <= steps.indexOf(step)) {\r\n      setBottomNavHidden(true);\r\n      setTopNavDisabled(true);\r\n    }\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  };\r\n\r\n  const onClickPrev = (goToPrev, steps, step) => {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  };\r\n\r\n  const { messages } = intl;\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard wizard-default\">\r\n        <Wizard>\r\n          <TopNavigation\r\n            className=\"justify-content-center\"\r\n            disableNav={false}\r\n            topNavClick={topNavClick}\r\n          />\r\n          <Steps>\r\n            <Step\r\n              id=\"step1\"\r\n              name={messages['wizard.step-name-1']}\r\n              desc={messages['wizard.step-desc-1']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.name\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder={messages['forms.name']}\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step2\"\r\n              name={messages['wizard.step-name-2']}\r\n              desc={messages['wizard.step-desc-2']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.email\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder={messages['forms.email']}\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step3\"\r\n              name={messages['wizard.step-name-3']}\r\n              desc={messages['wizard.step-desc-3']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.password\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      placeholder={messages['forms.password']}\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step id=\"step4\" hideTopNav>\r\n              <div className=\"wizard-basic-step text-center\">\r\n                <h2 className=\"mb-2\">\r\n                  <IntlMessages id=\"wizard.content-thanks\" />\r\n                </h2>\r\n                <p>\r\n                  <IntlMessages id=\"wizard.registered\" />\r\n                </p>\r\n              </div>\r\n            </Step>\r\n          </Steps>\r\n          <BottomNavigation\r\n            onClickNext={onClickNext}\r\n            onClickPrev={onClickPrev}\r\n            className={`justify-content-center ${\r\n              bottomNavHidden && 'invisible'\r\n            }`}\r\n            prevLabel={messages['wizard.prev']}\r\n            nextLabel={messages['wizard.next']}\r\n          />\r\n        </Wizard>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nexport default injectIntl(LastStepEnd);\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { useState } from 'react';\r\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\r\nimport TopNavigation from '../../components/wizard/TopNavigation';\r\n\r\nconst TopNavDisabled = ({ intl }) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const topNavClick = (stepItem, push) => {\r\n    push(stepItem.id);\r\n  };\r\n\r\n  const onClickNext = (goToNext, steps, step) => {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  };\r\n\r\n  const onClickPrev = (goToPrev, steps, step) => {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  };\r\n\r\n  const { messages } = intl;\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard wizard-default\">\r\n        <Wizard>\r\n          <TopNavigation\r\n            className=\"justify-content-center\"\r\n            disableNav\r\n            topNavClick={topNavClick}\r\n          />\r\n          <Steps>\r\n            <Step\r\n              id=\"step1\"\r\n              name={messages['wizard.step-name-1']}\r\n              desc={messages['wizard.step-desc-1']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.name\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"text\"\r\n                      name=\"name\"\r\n                      placeholder={messages['forms.name']}\r\n                      value={name}\r\n                      onChange={(e) => setName(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step2\"\r\n              name={messages['wizard.step-name-2']}\r\n              desc={messages['wizard.step-desc-2']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.email\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"email\"\r\n                      name=\"email\"\r\n                      placeholder={messages['forms.email']}\r\n                      value={email}\r\n                      onChange={(e) => setEmail(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step3\"\r\n              name={messages['wizard.step-name-3']}\r\n              desc={messages['wizard.step-desc-3']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Form>\r\n                  <FormGroup>\r\n                    <Label>\r\n                      <IntlMessages id=\"forms.password\" />\r\n                    </Label>\r\n                    <Input\r\n                      type=\"password\"\r\n                      name=\"password\"\r\n                      placeholder={messages['forms.password']}\r\n                      value={password}\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            </Step>\r\n            <Step id=\"step4\" hideTopNav>\r\n              <div className=\"wizard-basic-step text-center\">\r\n                <h2 className=\"mb-2\">\r\n                  <IntlMessages id=\"wizard.content-thanks\" />\r\n                </h2>\r\n                <p>\r\n                  <IntlMessages id=\"wizard.registered\" />\r\n                </p>\r\n              </div>\r\n            </Step>\r\n          </Steps>\r\n          <BottomNavigation\r\n            onClickNext={onClickNext}\r\n            onClickPrev={onClickPrev}\r\n            className=\"justify-content-center\"\r\n            prevLabel={messages['wizard.prev']}\r\n            nextLabel={messages['wizard.next']}\r\n          />\r\n        </Wizard>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default injectIntl(TopNavDisabled);\r\n","/* eslint-disable no-param-reassign */\r\nimport React, { createRef, useState } from 'react';\r\nimport { Card, CardBody, FormGroup, Label, Spinner } from 'reactstrap';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\r\nimport TopNavigation from '../../components/wizard/TopNavigation';\r\n\r\nconst validateEmail = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your email address';\r\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n    error = 'Invalid email address';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validateName = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your name';\r\n  } else if (value.length < 2) {\r\n    error = 'Value must be longer than 2 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst validatePassword = (value) => {\r\n  let error;\r\n  if (!value) {\r\n    error = 'Please enter your password';\r\n  } else if (value.length < 6) {\r\n    error = 'Password must be longer than 6 characters';\r\n  }\r\n  return error;\r\n};\r\n\r\nconst Validation = ({ intl }) => {\r\n  const forms = [createRef(null), createRef(null), createRef(null)];\r\n  const [bottomNavHidden, setBottomNavHidden] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [fields, setFields] = useState([\r\n    {\r\n      valid: false,\r\n      name: 'name',\r\n      value: '',\r\n    },\r\n    {\r\n      valid: false,\r\n      name: 'email',\r\n      value: '',\r\n    },\r\n    {\r\n      valid: false,\r\n      name: 'password',\r\n      value: '',\r\n    },\r\n  ]);\r\n\r\n  const asyncLoading = () => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const onClickNext = (goToNext, steps, step) => {\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    const formIndex = steps.indexOf(step);\r\n    const form = forms[formIndex].current;\r\n    const { name } = fields[formIndex];\r\n    form.submitForm().then(() => {\r\n      const newFields = [...fields];\r\n\r\n      newFields[formIndex].value = form.values[name];\r\n      newFields[formIndex].valid = !form.errors[name];\r\n      setFields(newFields);\r\n\r\n      if (!form.errors[name] && form.touched[name]) {\r\n        goToNext();\r\n        step.isDone = true;\r\n        if (steps.length - 2 <= steps.indexOf(step)) {\r\n          setBottomNavHidden(true);\r\n          asyncLoading();\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onClickPrev = (goToPrev, steps, step) => {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  };\r\n\r\n  const { messages } = intl;\r\n  return (\r\n    <Card>\r\n      <CardBody className=\"wizard wizard-default\">\r\n        <Wizard>\r\n          <TopNavigation className=\"justify-content-center\" disableNav />\r\n          <Steps>\r\n            <Step\r\n              id=\"step1\"\r\n              name={messages['wizard.step-name-1']}\r\n              desc={messages['wizard.step-desc-1']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Formik\r\n                  innerRef={forms[0]}\r\n                  initialValues={{\r\n                    name: fields[0].value,\r\n                  }}\r\n                  onSubmit={() => {}}\r\n                >\r\n                  {({ errors, touched }) => (\r\n                    <Form className=\"av-tooltip tooltip-label-right\">\r\n                      <FormGroup>\r\n                        <Label>{messages['forms.name']}</Label>\r\n                        <Field\r\n                          className=\"form-control\"\r\n                          name=\"name\"\r\n                          validate={validateName}\r\n                        />\r\n                        {errors.name && touched.name && (\r\n                          <div className=\"invalid-feedback d-block\">\r\n                            {errors.name}\r\n                          </div>\r\n                        )}\r\n                      </FormGroup>\r\n                    </Form>\r\n                  )}\r\n                </Formik>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step2\"\r\n              name={messages['wizard.step-name-2']}\r\n              desc={messages['wizard.step-desc-2']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Formik\r\n                  innerRef={forms[1]}\r\n                  initialValues={{\r\n                    email: fields[1].value,\r\n                  }}\r\n                  onSubmit={() => {}}\r\n                >\r\n                  {({ errors, touched }) => (\r\n                    <Form className=\"av-tooltip tooltip-label-right\">\r\n                      <FormGroup>\r\n                        <Label>{messages['forms.email']}</Label>\r\n                        <Field\r\n                          className=\"form-control\"\r\n                          name=\"email\"\r\n                          validate={validateEmail}\r\n                        />\r\n                        {errors.email && touched.email && (\r\n                          <div className=\"invalid-feedback d-block\">\r\n                            {errors.email}\r\n                          </div>\r\n                        )}\r\n                      </FormGroup>\r\n                    </Form>\r\n                  )}\r\n                </Formik>\r\n              </div>\r\n            </Step>\r\n            <Step\r\n              id=\"step3\"\r\n              name={messages['wizard.step-name-3']}\r\n              desc={messages['wizard.step-desc-3']}\r\n            >\r\n              <div className=\"wizard-basic-step\">\r\n                <Formik\r\n                  innerRef={forms[2]}\r\n                  initialValues={{\r\n                    password: fields[2].value,\r\n                  }}\r\n                  onSubmit={() => {}}\r\n                >\r\n                  {({ errors, touched }) => (\r\n                    <Form className=\"av-tooltip tooltip-label-right error-l-75\">\r\n                      <FormGroup>\r\n                        <Label>{messages['forms.password']}</Label>\r\n                        <Field\r\n                          className=\"form-control\"\r\n                          name=\"password\"\r\n                          type=\"password\"\r\n                          validate={validatePassword}\r\n                        />\r\n                        {errors.password && touched.password && (\r\n                          <div className=\"invalid-feedback d-block\">\r\n                            {errors.password}\r\n                          </div>\r\n                        )}\r\n                      </FormGroup>\r\n                    </Form>\r\n                  )}\r\n                </Formik>\r\n              </div>\r\n            </Step>\r\n            <Step id=\"step4\" hideTopNav>\r\n              <div className=\"wizard-basic-step text-center pt-3\">\r\n                {loading ? (\r\n                  <div>\r\n                    <Spinner color=\"primary\" className=\"mb-1\" />\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.async\" />\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  <div>\r\n                    <h2 className=\"mb-2\">\r\n                      <IntlMessages id=\"wizard.content-thanks\" />\r\n                    </h2>\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.registered\" />\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Step>\r\n          </Steps>\r\n          <BottomNavigation\r\n            onClickNext={onClickNext}\r\n            onClickPrev={onClickPrev}\r\n            className={`justify-content-center ${\r\n              bottomNavHidden && 'invisible'\r\n            }`}\r\n            prevLabel={messages['wizard.prev']}\r\n            nextLabel={messages['wizard.next']}\r\n          />\r\n        </Wizard>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\nexport default injectIntl(Validation);\r\n","/* eslint-disable no-param-reassign */\r\nimport React from 'react';\r\nimport { Card, CardBody, Row } from 'reactstrap';\r\nimport { Wizard, Steps, Step } from 'react-albus';\r\nimport { injectIntl } from 'react-intl';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\r\nimport TopNavigation from '../../components/wizard/TopNavigation';\r\nimport { Colxx } from '../../components/common/CustomBootstrap';\r\n\r\nconst Layouts = ({ intl }) => {\r\n  const topNavClick = (stepItem, push) => {\r\n    push(stepItem.id);\r\n  };\r\n\r\n  const onClickNext = (goToNext, steps, step) => {\r\n    step.isDone = true;\r\n    if (steps.length - 1 <= steps.indexOf(step)) {\r\n      return;\r\n    }\r\n    goToNext();\r\n  };\r\n\r\n  const onClickPrev = (goToPrev, steps, step) => {\r\n    if (steps.indexOf(step) <= 0) {\r\n      return;\r\n    }\r\n    goToPrev();\r\n  };\r\n\r\n  const { messages } = intl;\r\n  return (\r\n    <Row>\r\n      <Colxx xxs=\"12\" xl=\"6\" className=\"mb-5\">\r\n        <Card>\r\n          <CardBody className=\"wizard wizard-default\">\r\n            <Wizard>\r\n              <TopNavigation\r\n                className=\"justify-content-between\"\r\n                disableNav={false}\r\n                topNavClick={topNavClick}\r\n              />\r\n              <Steps>\r\n                <Step\r\n                  id=\"step1\"\r\n                  name={messages['wizard.step-name-1']}\r\n                  desc={messages['wizard.step-desc-1']}\r\n                >\r\n                  <div className=\"wizard-basic-step text-center\">\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.content-1\" />\r\n                    </p>\r\n                  </div>\r\n                </Step>\r\n                <Step\r\n                  id=\"step2\"\r\n                  name={messages['wizard.step-name-2']}\r\n                  desc={messages['wizard.step-desc-2']}\r\n                >\r\n                  <div className=\"wizard-basic-step text-center\">\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.content-2\" />\r\n                    </p>\r\n                  </div>\r\n                </Step>\r\n                <Step\r\n                  id=\"step3\"\r\n                  name={messages['wizard.step-name-3']}\r\n                  desc={messages['wizard.step-desc-3']}\r\n                  hideTopNav\r\n                >\r\n                  <div className=\"wizard-basic-step text-center\">\r\n                    <h2 className=\"mb-2\">\r\n                      <IntlMessages id=\"wizard.content-thanks\" />\r\n                    </h2>\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.content-3\" />\r\n                    </p>\r\n                  </div>\r\n                </Step>\r\n              </Steps>\r\n              <BottomNavigation\r\n                onClickNext={onClickNext}\r\n                onClickPrev={onClickPrev}\r\n                className=\"justify-content-between\"\r\n                prevLabel={messages['wizard.prev']}\r\n                nextLabel={messages['wizard.next']}\r\n              />\r\n            </Wizard>\r\n          </CardBody>\r\n        </Card>\r\n      </Colxx>\r\n      <Colxx xxs=\"12\" xl=\"6\">\r\n        <Card>\r\n          <CardBody className=\"wizard wizard-default\">\r\n            <Wizard>\r\n              <TopNavigation\r\n                className=\"justify-content-start\"\r\n                disableNav={false}\r\n                topNavClick={topNavClick}\r\n              />\r\n              <Steps>\r\n                <Step\r\n                  id=\"step1\"\r\n                  name={messages['wizard.step-name-1']}\r\n                  desc={messages['wizard.step-desc-1']}\r\n                >\r\n                  <div className=\"wizard-basic-step\">\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.content-1\" />\r\n                    </p>\r\n                  </div>\r\n                </Step>\r\n                <Step\r\n                  id=\"step2\"\r\n                  name={messages['wizard.step-name-2']}\r\n                  desc={messages['wizard.step-desc-2']}\r\n                >\r\n                  <div className=\"wizard-basic-step\">\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.content-2\" />\r\n                    </p>\r\n                  </div>\r\n                </Step>\r\n                <Step\r\n                  id=\"step3\"\r\n                  name={messages['wizard.step-name-3']}\r\n                  desc={messages['wizard.step-desc-3']}\r\n                  hideTopNav\r\n                >\r\n                  <div className=\"wizard-basic-step\">\r\n                    <h2 className=\"mb-2\">\r\n                      <IntlMessages id=\"wizard.content-thanks\" />\r\n                    </h2>\r\n                    <p>\r\n                      <IntlMessages id=\"wizard.content-3\" />\r\n                    </p>\r\n                  </div>\r\n                </Step>\r\n              </Steps>\r\n              <BottomNavigation\r\n                onClickNext={onClickNext}\r\n                onClickPrev={onClickPrev}\r\n                className=\"justify-content-start\"\r\n                prevLabel={messages['wizard.prev']}\r\n                nextLabel={messages['wizard.next']}\r\n              />\r\n            </Wizard>\r\n          </CardBody>\r\n        </Card>\r\n      </Colxx>\r\n    </Row>\r\n  );\r\n};\r\nexport default injectIntl(Layouts);\r\n","import React from 'react';\r\nimport { Row } from 'reactstrap';\r\nimport {\r\n  Colxx,\r\n  Separator,\r\n} from '../../../../components/common/CustomBootstrap';\r\nimport Breadcrumb from '../../../../containers/navs/Breadcrumb';\r\nimport Basic from '../../../../containers/wizard/Basic';\r\nimport LastStepEnd from '../../../../containers/wizard/LastStepEnd';\r\nimport TopNavDisabled from '../../../../containers/wizard/TopNavDisabled';\r\nimport Validation from '../../../../containers/wizard/Validation';\r\nimport Layouts from '../../../../containers/wizard/Layouts';\r\n\r\nconst FormWizard = ({ match }) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Colxx xxs=\"12\">\r\n          <Breadcrumb heading=\"menu.form-wizard\" match={match} />\r\n          <Separator className=\"mb-5\" />\r\n        </Colxx>\r\n      </Row>\r\n      <Row>\r\n        <Colxx xxs=\"12\" className=\"mb-5\">\r\n          <h5 className=\"mb-4\">Basic</h5>\r\n          <Basic />\r\n        </Colxx>\r\n        <Colxx xxs=\"12\" className=\"mb-5\">\r\n          <h5 className=\"mb-4\">Last Step End</h5>\r\n          <LastStepEnd />\r\n        </Colxx>\r\n        <Colxx xxs=\"12\" className=\"mb-5\">\r\n          <h5 className=\"mb-4\">Top Navigation Disabled</h5>\r\n          <TopNavDisabled />\r\n        </Colxx>\r\n        <Colxx xxs=\"12\" className=\"mb-5\">\r\n          <h5 className=\"mb-4\">Validation</h5>\r\n          <Validation />\r\n        </Colxx>\r\n        <Colxx xxs=\"12\" className=\"mb-5\">\r\n          <h5 className=\"mb-4\">Layouts</h5>\r\n          <Layouts />\r\n        </Colxx>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\nexport default FormWizard;\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React from 'react';\r\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\r\nimport { NavLink } from 'react-router-dom';\r\nimport IntlMessages from '../../helpers/IntlMessages';\r\n\r\nconst getMenuTitle = (sub) => {\r\n  return <IntlMessages id={`menu.${sub}`} />;\r\n};\r\n\r\nconst getUrl = (path, sub, index) => {\r\n  if (index === 0) {\r\n    return '';\r\n  }\r\n  return path.split(sub)[0] + sub;\r\n};\r\n\r\nconst BreadcrumbContainer = ({ heading, match }) => {\r\n  return (\r\n    <>\r\n      {heading && (\r\n        <h1>\r\n          <IntlMessages id={heading} />\r\n        </h1>\r\n      )}\r\n      <BreadcrumbItems match={match} />\r\n    </>\r\n  );\r\n};\r\n\r\nconst BreadcrumbItems = ({ match }) => {\r\n  const path = match.path.substr(1);\r\n  let paths = path.split('/');\r\n  if (paths[paths.length - 1].indexOf(':') > -1) {\r\n    paths = paths.filter((x) => x.indexOf(':') === -1);\r\n  }\r\n  return (\r\n    <>\r\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\r\n        {paths.map((sub, index) => {\r\n          return (\r\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\r\n              {paths.length !== index + 1 ? (\r\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\r\n                  {getMenuTitle(sub)}\r\n                </NavLink>\r\n              ) : (\r\n                getMenuTitle(sub)\r\n              )}\r\n            </BreadcrumbItem>\r\n          );\r\n        })}\r\n      </Breadcrumb>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BreadcrumbContainer;\r\n"],"sourceRoot":""}